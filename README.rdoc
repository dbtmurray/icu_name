= ICU Tournament

Canonicalises and matches person names with Western European characters and first and last names.

== Installation

For ruby 1.9.2 and above.

  gem install icu_name

It depends on _active_support_ and _i18n_.

== Names

This class exists for two main purposes:

* to normalise to a common format the different ways names are typed in practice
* to be able to match two names even if they are not exactly the same

To create a name object, supply both the first and second names separately to the constructor.

  robert = ICU::Name.new(' robert  j ', ' FISHER ')

Capitalisation, white space and punctuation will all be automatically corrected:

  robert.name                                             # => 'Robert J. Fischer'
  robert.rname                                            # => 'Fischer, Robert J.'  (reversed name)

The input text, without any changes apart from white-space cleanup and the insertion of a comma
(to separate the two names), is returned by the _original_ method:

  robert.original                                         # => 'FISCHER, robert j'

To avoid ambiguity when either the first or second names consist of multiple words, it is better to
supply the two separately, if known. However, the full name can be supplied alone to the constructor
and a guess will be made as to the first and last names (the last distinct word becomes the last name).

  bobby = ICU::Name.new(' bobby  fischer ')

  bobby.first                                             # => 'Bobby'
  bobby.last                                              # => 'Fischer'

But in this case, since the names were not supplied separately, the _original_ text will not contain a comma:

  bobby.original                                          # => 'bobby fischer'

Names will match even if one is missing middle initials or if a nickname is used for one of the first names.

  bobby.match('Robert J.', 'Fischer')                     # => true

Note that the class is aware of only common nicknames (e.g. _Bobby_ and _Robert_, _Bill_ and _William_, etc)
and not all possibilities.

Supplying the _match_ method with strings is equivalent to instantiating a Name instance with the same
strings and then matching it. So, for example the following are equivalent:

  robert.match('R.', 'Fischer')                           # => true
  robert.match(ICU::Name.new('R.', 'Fischer'))            # => true

The inital _R_, for example, matches the first letter of _Robert_. However, nickname matches will not
always work with initials. In the next example, the initial _R_ does not match the first letter _B_ of the
nickname _Bobby_.

  bobby.match('R. J.', 'Fischer')                         # => false

Some of the ways last names are canonicalised are illustrated below:

  ICU::Name.new('John', 'O Reilly').last                  # => "O'Reilly"
  ICU::Name.new('dave', 'mcmanus').last                   # => "McManus"

== Characters and Encoding

The class can only cope with Latin characters, including those with diacritics (accents).
Along with hyphens and single quotes (which represent apostophes) letters in ISO-8859-1
(e.g. "a", "è", "Ö") and letters outside ISO-8859-1 which are decomposable into a US-ASCII
character plus one or more diacritics (e.g. "ł" or "Ś") are preserved, while everything
else is removed.

  ICU::Name.new('éric', 'PRIÉ').name                      # => "Éric Prié"
  ICU::Name.new('BARTŁOMIEJ', 'śliwa').name               # => "Bartłomiej Śliwa"
  ICU::Name.new(' 渡井美代子').name                            # => ""

The various accessors (_first_, _last_, _name_, _rname_, _to_s_, _original_) always return
strings encoded in UTF-8, no matter what the input encoding.

  eric = ICU::Name.new('éric'.encode("ISO-8859-1"), 'PRIÉ'.force_encoding("ASCII-8BIT"))
  eric.rname                                              # => "Prié, Éric"
  eric.rname.encoding.name                                # => "UTF-8"
  eric.original                                           # => "PRIÉ, éric"
  eric.original.encoding.name                             # => "UTF-8"

Accented letters can be transliterated into their US-ASCII counterparts by setting the
_chars_ option, which is available in all accessors. For example:

  eric.rname(:chars => "US-ASCII")                        # => "Prie, Eric"
  eric.original(:chars => "US-ASCII")                     # => "PRIE, eric"

Also possible is the preservation of ISO-8859-1 characters, but the transliteration of
all other accented characters:

  joe = Name.new('Józef', 'Żabiński')
  joe.rname                                               # => "Żabiński, Józef"
  joe.rname(:chars => "ISO-8859-1")                       # => "Zabinski, Józef"
  joe.rname(:chars => "US-ASCII")                         # => "Zabinski, Jozef"

Note that the character encoding of the strings returned is still UTF-8 in all cases.
The same option also relaxes the need for accented characters to match exactly:

  eric.match('Eric', 'Prie')                              # => false
  eric.match('Eric', 'Prie', :chars => "US-ASCII")        # => true
  joe.match('Józef', 'Zabinski')                          # => false
  joe.match('Józef', 'Zabinski', :chars => "ISO-8859-1")  # => true

== Author

Mark Orr, rating officer for the Irish Chess Union (ICU[http://icu.ie]).
